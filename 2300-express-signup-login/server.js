let express = require("express") // 1
let app = express() // 1
let multer = require("multer") // 3
let upload = multer() // 3
let passwordsAssoc = {} // 4
app.use('/', express.static(__dirname + '/public')) // 2
app.post("/signup", upload.none(), (req, res) => { // 5
  console.log("/signup hit", req.body) // 5
  let username = req.body.username // 6
  let password = req.body.password // 6
  passwordsAssoc[username] = password // 7
  res.send("<html><body> signup successful </body></html>") // 8
}) // 5
app.post("/login", upload.none(), (req, res) => { // 9
  console.log("/login hit", req.body) // 9
  let username = req.body.username // 10
  let passwordGiven = req.body.password // 10
  let expectedPassword = passwordsAssoc[username] // 11
  if (expectedPassword !== passwordGiven) { // 12
    res.send("<html><body> invalid username or password </body></html>") // 12
    return // 12
  } // 12
  res.send("<html><body> login successful </body></html>") // 13
}) // 9
app.listen(4000, () => { // 1
  console.log("server started") // 1
}) // 1

/* meta
({
  text: {
    1: `We'll be using express to create our HTTP server . The second argument passed
    to the listen function call is a function that gets called once the server has started. It's optional`,
    2: `This line creates a GET endpoint for every file in the public/ folder. Namely:
- GET endpoint at path /index.html`,
    3: `We will be using the multer library in this project. Multer is a library that lets you
    process HTTP requests that result from a form submission. We also create a variable upload that refers to an object that will give
    our endpoints the capability of receiving HTTP requests from a form submission.  `,
    4: `We're creating a new object and the variable passwordsAssoc will contain a reference to it.
    The properties of this object will be the usernames and the values are going to be the passwords.
    Since the properties are not known until users sign up, we will be using object bracket notation to update this object, so make sure you're familiar with
    object bracket notation before continuing.`,
    5: `This endpoint will process the HTTP request generated by the signup form in our index.html file.
    The path is /signup and the second argument to the function call is called the endpoint handler.
    The console.log is for debugging purposes. In the console you'll be able to get more information about the request body.
    To receive the body of the HTTP request, we use the upload variable that refers to an object
    generated from the multer library.
     Passing upload.none() as the second argument to app.post gives the endpoint handler access to the request body through
     req.body where req is the second parameter of the endpoint handler.


    `,
    6: `As a convenience, I declared two variables: username and password. This step is not necessary, but it helps to make
    the code more readable`,
    7: `passwordsAssoc refers to an object. I update the object using objet bracket notation. For example, if the
    user had supplied the username 'bob' and the password 'pwd123' then the object would be {bob: 'pwd123'} assuming it was
    empty before.`,
    8: `The positive response to the form submission is sent back to the user. This will be displayed
    to the user when they submit the form`,
    9: `There are two forms on the index.html file, so we need two endpoints, one for each form.
    To receive the body of the HTTP request, we use the upload variable that refers to an object
     from the multer library. The console.log is for debugging purposes.
    `,
    10: `Again, for convenience and readibility, I declare two variables`,
    11: `The /login endpoint uses the passwordsAssoc object
    differently than the /signup endpoint. Whereas the /signup endpoint
    updates our passwordsAssoc object,
    the /login endpoint retrieves information from it. Namely, the password
    associated with the username. For example, if the user had supplied
    a username of 'sue' and the passwordsAssoc object
    was {sue: 'pass'}, then passwordsAssoc[username] would be 'pass'`,
    12: `If the password that was given in the form does not match the password that we had stored in our passwordsAssoc
    object, then respond with a message telling the user so.`,
    13: `At this line, we are sure that the expectedPassword is equal to the passwordGiven. Can you explain why?`
  }
})
*/